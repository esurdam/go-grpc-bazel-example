load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@aspect_bazel_lib//lib:testing.bzl", "assert_archive_contains")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load", "oci_push")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

# This is used to embed the swagger.json file into the go binary
genrule(
    name = "hellodata",
    srcs = ["//pb/helloworld:helloworld_openapi_swagger"],
    outs = ["helloworld_openapi_swagger.json"],
    cmd = "cat $(SRCS) > $@",
)

go_library(
    name = "helloworld_lib",
    srcs = [
        "data.go",
        "main.go",
    ],
    embedsrcs = ["helloworld_openapi_swagger.json"],
    importpath = "github.com/esurdam/go-grpc-bazel-example/services/helloworld",
    visibility = ["//visibility:private"],
    deps = [
        "//pb/helloworld:helloworld_gateway_proto",
        "//pkg/helloworld/server",
        "@com_github_grpc_ecosystem_grpc_gateway_v2//runtime",
        "@com_github_philip_bui_grpc_zerolog//:grpc-zerolog",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//credentials",
    ],
)

go_binary(
    name = "helloworld",
    embed = [":helloworld_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "app_layer",
    srcs = {":helloworld": "helloworld"},
)

# Prove that the application is at the path we expect in that tar.
# Uncomment to test the app layer in CI
# assert_archive_contains(
#     name = "assert_app_layer",
#     archive = "app_layer.tar",
#     expected = ["helloworld"],
# )

#https://github.com/aspect-build/bazel-examples/blob/main/oci_go_image/BUILD.bazel
oci_image(
    name = "image",
    base = "@distroless_base",
    entrypoint = ["/helloworld"],
    labels = {
        "org.opencontainers.image.source": "https://github.com/esurdam/go-grpc-bazel-example",
    },
    tars = [":app_layer"],
)

platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@rules_go//go/toolchain:linux_amd64",
    }),
)

# $ bazel run //oci_go_image:load
# $ docker run --rm gcr.io/example:latest
#   string(
# -       "Hello World",
# +       "Hello Go",
#   )
oci_load(
    name = "load",
    # Use the image built for the target platform
    image = ":transitioned_image",
    repo_tags = ["ghcr.io/esurdam/go-grpc-bazel-example/services/helloworld:latest"],
)

write_file(
    name = "tags_tmpl",
    out = "tags.txt.tmpl",
    content = [
        "BUILD_VERSION",
    ],
)

expand_template(
    name = "stamped",
    out = "_stamped.tags.txt",
    stamp_substitutions = {"BUILD_VERSION": "{{BUILD_EMBED_LABEL}}"},
    substitutions = {"BUILD_VERSION": "0.0.0"},
    template = "tags_tmpl",
)

oci_push(
    name = "push",
    image = ":transitioned_image",
    remote_tags = ":stamped",
    repository = "ghcr.io/esurdam/go-grpc-bazel-example/services/helloworld",
    visibility = ["//visibility:public"],
)
