load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push", "oci_tarball")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@k8s_deploy//:defaults.bzl", "k8s_deploy")

go_library(
    name = "helloworld_lib",
    srcs = [
        "data.go",
        "main.go",
    ],
    embedsrcs = [
        "//pb/helloworld:helloworld_openapi_swagger",
    ],
    importpath = "github.com/AdGreetz/go-grpc-bazel-example/services/helloworld",
    visibility = ["//visibility:private"],
    deps = [
        "//pb/helloworld",
        "//pkg/helloworld/server",
        "@com_github_grpc_ecosystem_grpc_gateway_v2//runtime",
        "@com_github_philip_bui_grpc_zerolog//:grpc-zerolog",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//credentials",
    ],
)

go_binary(
    name = "helloworld",
    embed = [":helloworld_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "app_layer",
    srcs = [":helloworld"],
)

oci_image(
    name = "image",
    base = "@distroless_base",
    entrypoint = ["/helloworld"],
    tars = [":app_layer"],
)

platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@io_bazel_rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@io_bazel_rules_go//go/toolchain:linux_amd64",
    }),
)

# $ bazel run :tarball
# $ docker run --rm gcr.io/example:latest
oci_tarball(
    name = "tarball",
    # Use the image built for the exec platform rather than the target platform
    image = ":image",
    repo_tags = ["ghcr.io/adgreetz/go-grpc-bazel-example/services/helloworld:latest"],
)

oci_push(
    name = "push",
    image = ":image",
    remote_tags = ["latest"],
    repository = "ghcr.io/adgreetz/go-grpc-bazel-example/services/helloworld",
)

k8s_deploy(
    name = "k8s",
    images = {
        "services/helloworld:latest": "//services/helloworld:docker",
    },
    template = "//ci/services:helloworld.yaml",
)
